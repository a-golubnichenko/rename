1A shard director is a specific implementation of a global service manager that acts as a regional listener for clients that connect to an SDB. The director maintains a current topology map of the SDB. 
Based on the sharding key passed during a connection request, the director routes the connections to the appropriate shard.
Oracle Database supports connection-pooling in data access drivers such as OCI, JDBC, and ODP.NET. In Oracle 12c Release 2, these drivers can recognize sharding keys specified as part of a connection request. 
Similarly, the Oracle Universal Connection Pool (UCP) for JDBC clients can recognize sharding keys specified in a connection URL.
GDSCTL is a command-line interface that provides a simple declarative way of specifying the configuration of an SDB and automating its deployment. Only a few GDSCTL commands are required to create an SDB, for example:
CREATE SHARDCATALOG
ADD GSM and START GSM (create and start shard directors)
CREATE SHARD (for each shard)
DEPLOY
Existing applications that were never intended to be sharded will require some level of redesign to achieve the benefits of a sharded architecture. 
In some cases it may be as simple as providing the sharding key, in other cases it may be impossible to horizontally partition data and workload as required by a sharded database.
Many customer-facing web applications, such as e-commerce, mobile, and social media are well suited to sharding. Such applications have a well defined data model and 
data distribution strategy (hash, range, list, or composite) and primarily access data using a sharding key. Examples of sharding keys include customer ID, account number, and country_id. 
Applications will also usually require partial de-normalization of data to perform well with sharding.
Partitions are distributed across shards at the tablespace level, based on a sharding key. Examples of keys include customer ID, account number, and country ID. 

To specify how rows should be partitioned across shards, use the familiar SQL syntax for table partitioning. For example, the following SQL statement creates a sharded table, 
horizontally partitioning the table across shards based on sharding key cust_id:

CREATE SHARDED TABLE customers 
( cust_id     NUMBER NOT NULL
, name        VARCHAR2(50)
, address     VARCHAR2(250)
, region      VARCHAR2(20)
, class       VARCHAR2(3)
, signup      DATE
CONSTRAINT cust_pk PRIMARY KEY(cust_id)
)
PARTITION BY CONSISTENT HASH (cust_id)
PARTITIONS AUTO
TABLESPACE SET ts1
;
Oracle Sharding automatically distributes the partitions across shards when you execute the CREATE SHARDED TABLE statement, and the distribution of partitions is transparent to applications. 
Because Oracle Sharding is based on table partitioning, all of the subpartitioning methods provided by Oracle Database are also supported for sharding.
Composite sharding enables two levels of sharding - one by list or range and another by consistent hash. 
This is accomplished by the application providing two keys: a super sharding key and a sharding key. 
Oracle clients and connections pools are able to recognize sharding keys specified in the connection string for high performance data dependent routing. 
A shard routing cache in the connection layer is used to route database requests directly to the shard where the data resides.

In support of Oracle Sharding, key enhancements have been made to Oracle connection pools and drivers. Starting in Oracle Database 12c Release 2, JDBC, Universal Connection Pool (UCP), OCI Session Pool (OCI), 
and Oracle Data Provider for .NET (ODP.NET) provide new APIs to pass sharding keys during the connection creation.
When a connection request is made with a sharding key, the connection pool looks up the corresponding shard on which this particular sharding key exists (from its topology cache). 
If a matching connection is available in the pool then the pool returns a connection to the shard by applying its internal connection selection algorithm.

https://docs.oracle.com/en/database/oracle/oracle-database/12.2/admin/sharding-data-routing.html#GUID-A49CEDDD-49F7-49EF-B83B-74048A63021E

String url = "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(HOST=shard-dir1)(PORT=3216)(PROTOCOL=tcp))(CONNECT_DATA=(SERVICE_NAME=shsvc.shpool.oradbcloud)(REGION=east)))";
    